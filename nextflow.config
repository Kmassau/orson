// Load processes parameters
includeConfig 'conf/base.config'
// Load resources configuration
includeConfig 'conf/resources.config'

manifest {
    name = 'ORSON'
    author = 'IFREMER-IRSI-SeBiMER'
    description = 'Workflow for prOteome and tRanScriptome functiOnal aNnotation developped by Ifremer SeBiMER team'
    homePage = 'https://gitlab.ifremer.fr/bioinfo/orson'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.10.0'
    version = 'beta'
}

// Execution profiles
profiles {
    test { 
        includeConfig 'conf/test.config'
        includeConfig 'conf/reports.config'
        // Workdir for temporary data
        workDir = "${baseDir}/work/$params.projectName"
    }
    custom {
        includeConfig 'conf/custom.config'
        includeConfig 'conf/reports.config'
        // Workdir for temporary data
        workDir = "${baseDir}/work/$params.projectName"
    }
    singularity {
        docker.enabled = false
        singularity.autoMounts = true
        singularity.enabled = true
        process {
            withName : downloadDB {
                container = "/appli/bioinfo/beedeem/singularity/beedeem-4.6.1.sif"
            }
            withName : interpro {
                container = "/appli/bioinfo/interproscan/5.48-83.0/iprscan-LE.sif"
            }
            withName : beedeem_annotation {
                container = "/appli/bioinfo/beedeem/singularity/beedeem-4.6.1.sif"
            }

        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
